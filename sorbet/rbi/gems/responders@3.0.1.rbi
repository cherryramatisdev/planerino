# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `responders` gem.
# Please instead update this file by running `bin/tapioca gem responders`.

# source://responders//lib/responders.rb#6
module ActionController
  class << self
    # See <tt>Renderers.add</tt>
    #
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#7
    def add_renderer(key, &block); end

    # See <tt>Renderers.remove</tt>
    #
    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#12
    def remove_renderer(key); end
  end
end

# API Controller is a lightweight version of ActionController::Base,
# created for applications that don't require all functionalities that a complete
# \Rails controller provides, allowing you to create controllers with just the
# features that you need for API only applications.
#
# An API Controller is different from a normal controller in the sense that
# by default it doesn't include a number of features that are usually required
# by browser access only: layouts and templates rendering,
# flash, assets, and so on. This makes the entire controller stack thinner,
# suitable for API applications. It doesn't mean you won't have such
# features if you need them: they're all available for you to include in
# your application, they're just not part of the default API controller stack.
#
# Normally, +ApplicationController+ is the only controller that inherits from
# <tt>ActionController::API</tt>. All other controllers in turn inherit from
# +ApplicationController+.
#
# A sample controller could look like this:
#
#   class PostsController < ApplicationController
#     def index
#       posts = Post.all
#       render json: posts
#     end
#   end
#
# Request, response, and parameters objects all work the exact same way as
# ActionController::Base.
#
# == Renders
#
# The default API Controller stack includes all renderers, which means you
# can use <tt>render :json</tt> and siblings freely in your controllers. Keep
# in mind that templates are not going to be rendered, so you need to ensure
# your controller is calling either <tt>render</tt> or <tt>redirect_to</tt> in
# all actions, otherwise it will return 204 No Content.
#
#   def show
#     post = Post.find(params[:id])
#     render json: post
#   end
#
# == Redirects
#
# Redirects are used to move from one action to another. You can use the
# <tt>redirect_to</tt> method in your controllers in the same way as in
# ActionController::Base. For example:
#
#   def create
#     redirect_to root_url and return if not_authorized?
#     # do stuff here
#   end
#
# == Adding New Behavior
#
# In some scenarios you may want to add back some functionality provided by
# ActionController::Base that is not present by default in
# <tt>ActionController::API</tt>, for instance <tt>MimeResponds</tt>. This
# module gives you the <tt>respond_to</tt> method. Adding it is quite simple,
# you just need to include the module in a specific controller or in
# +ApplicationController+ in case you want it available in your entire
# application:
#
#   class ApplicationController < ActionController::API
#     include ActionController::MimeResponds
#   end
#
#   class PostsController < ApplicationController
#     def index
#       posts = Post.all
#
#       respond_to do |format|
#         format.json { render json: posts }
#         format.xml  { render xml: posts }
#       end
#     end
#   end
#
# Make sure to check the modules included in ActionController::Base
# if you want to use any other functionality that is not provided
# by <tt>ActionController::API</tt> out of the box.
#
# @abstract It cannot be directly instantiated. Subclasses must implement the `abstract` methods below.
class ActionController::API < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://responders//lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to; end

  # source://responders//lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to=(_arg0); end

  # source://responders//lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://responders//lib/action_controller/respond_with.rb#11
  def responder; end

  # source://responders//lib/action_controller/respond_with.rb#11
  def responder=(_arg0); end

  # source://responders//lib/action_controller/respond_with.rb#11
  def responder?; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to=(value); end

    # source://responders//lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def responder; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def responder=(value); end

    # source://responders//lib/action_controller/respond_with.rb#11
    def responder?; end

    # Shortcut helper that returns all the ActionController::API modules except
    # the ones passed as arguments:
    #
    #   class MyAPIBaseController < ActionController::Metal
    #     ActionController::API.without_modules(:UrlFor).each do |left|
    #       include left
    #     end
    #   end
    #
    # This gives better control over what you want to exclude and makes it easier
    # to create an API controller class, instead of listing the modules required
    # manually.
    #
    # source://actionpack/7.0.4/lib/action_controller/api.rb#104
    def without_modules(*modules); end
  end
end

# source://actionpack/7.0.4/lib/action_controller/api.rb#112
ActionController::API::MODULES = T.let(T.unsafe(nil), Array)

# Action Controllers are the core of a web request in \Rails. They are made up of one or more actions that are executed
# on request and then either it renders a template or redirects to another action. An action is defined as a public method
# on the controller, which will automatically be made accessible to the web-server through \Rails Routes.
#
# By default, only the ApplicationController in a \Rails application inherits from <tt>ActionController::Base</tt>. All other
# controllers inherit from ApplicationController. This gives you one class to configure things such as
# request forgery protection and filtering of sensitive request parameters.
#
# A sample controller could look like this:
#
#   class PostsController < ApplicationController
#     def index
#       @posts = Post.all
#     end
#
#     def create
#       @post = Post.create params[:post]
#       redirect_to posts_path
#     end
#   end
#
# Actions, by default, render a template in the <tt>app/views</tt> directory corresponding to the name of the controller and action
# after executing code in the action. For example, the +index+ action of the PostsController would render the
# template <tt>app/views/posts/index.html.erb</tt> by default after populating the <tt>@posts</tt> instance variable.
#
# Unlike index, the create action will not render a template. After performing its main purpose (creating a
# new post), it initiates a redirect instead. This redirect works by returning an external
# <tt>302 Moved</tt> HTTP response that takes the user to the index action.
#
# These two methods represent the two basic action archetypes used in Action Controllers: Get-and-show and do-and-redirect.
# Most actions are variations on these themes.
#
# == Requests
#
# For every request, the router determines the value of the +controller+ and +action+ keys. These determine which controller
# and action are called. The remaining request parameters, the session (if one is available), and the full request with
# all the HTTP headers are made available to the action through accessor methods. Then the action is performed.
#
# The full request object is available via the request accessor and is primarily used to query for HTTP headers:
#
#   def server_ip
#     location = request.env["REMOTE_ADDR"]
#     render plain: "This server hosted at #{location}"
#   end
#
# == Parameters
#
# All request parameters, whether they come from a query string in the URL or form data submitted through a POST request are
# available through the <tt>params</tt> method which returns a hash. For example, an action that was performed through
# <tt>/posts?category=All&limit=5</tt> will include <tt>{ "category" => "All", "limit" => "5" }</tt> in <tt>params</tt>.
#
# It's also possible to construct multi-dimensional parameter hashes by specifying keys using brackets, such as:
#
#   <input type="text" name="post[name]" value="david">
#   <input type="text" name="post[address]" value="hyacintvej">
#
# A request coming from a form holding these inputs will include <tt>{ "post" => { "name" => "david", "address" => "hyacintvej" } }</tt>.
# If the address input had been named <tt>post[address][street]</tt>, the <tt>params</tt> would have included
# <tt>{ "post" => { "address" => { "street" => "hyacintvej" } } }</tt>. There's no limit to the depth of the nesting.
#
# == Sessions
#
# Sessions allow you to store objects in between requests. This is useful for objects that are not yet ready to be persisted,
# such as a Signup object constructed in a multi-paged process, or objects that don't change much and are needed all the time, such
# as a User object for a system that requires login. The session should not be used, however, as a cache for objects where it's likely
# they could be changed unknowingly. It's usually too much work to keep it all synchronized -- something databases already excel at.
#
# You can place objects in the session by using the <tt>session</tt> method, which accesses a hash:
#
#   session[:person] = Person.authenticate(user_name, password)
#
# You can retrieve it again through the same hash:
#
#   "Hello #{session[:person]}"
#
# For removing objects from the session, you can either assign a single key to +nil+:
#
#   # removes :person from session
#   session[:person] = nil
#
# or you can remove the entire session with +reset_session+.
#
# By default, sessions are stored in an encrypted browser cookie (see
# ActionDispatch::Session::CookieStore). Thus the user will not be able to
# read or edit the session data. However, the user can keep a copy of the
# cookie even after it has expired, so you should avoid storing sensitive
# information in cookie-based sessions.
#
# == Responses
#
# Each action results in a response, which holds the headers and document to be sent to the user's browser. The actual response
# object is generated automatically through the use of renders and redirects and requires no user intervention.
#
# == Renders
#
# Action Controller sends content to the user by using one of five rendering methods. The most versatile and common is the rendering
# of a template. Included in the Action Pack is the Action View, which enables rendering of ERB templates. It's automatically configured.
# The controller passes objects to the view by assigning instance variables:
#
#   def show
#     @post = Post.find(params[:id])
#   end
#
# Which are then automatically available to the view:
#
#   Title: <%= @post.title %>
#
# You don't have to rely on the automated rendering. For example, actions that could result in the rendering of different templates
# will use the manual rendering methods:
#
#   def search
#     @results = Search.find(params[:query])
#     case @results.count
#       when 0 then render action: "no_results"
#       when 1 then render action: "show"
#       when 2..10 then render action: "show_many"
#     end
#   end
#
# Read more about writing ERB and Builder templates in ActionView::Base.
#
# == Redirects
#
# Redirects are used to move from one action to another. For example, after a <tt>create</tt> action, which stores a blog entry to the
# database, we might like to show the user the new entry. Because we're following good DRY principles (Don't Repeat Yourself), we're
# going to reuse (and redirect to) a <tt>show</tt> action that we'll assume has already been created. The code might look like this:
#
#   def create
#     @entry = Entry.new(params[:entry])
#     if @entry.save
#       # The entry was saved correctly, redirect to show
#       redirect_to action: 'show', id: @entry.id
#     else
#       # things didn't go so well, do something else
#     end
#   end
#
# In this case, after saving our new entry to the database, the user is redirected to the <tt>show</tt> method, which is then executed.
# Note that this is an external HTTP-level redirection which will cause the browser to make a second request (a GET to the show action),
# and not some internal re-routing which calls both "create" and then "show" within one request.
#
# Learn more about <tt>redirect_to</tt> and what options you have in ActionController::Redirecting.
#
# == Calling multiple redirects or renders
#
# An action may contain only a single render or a single redirect. Attempting to try to do either again will result in a DoubleRenderError:
#
#   def do_something
#     redirect_to action: "elsewhere"
#     render action: "overthere" # raises DoubleRenderError
#   end
#
# If you need to redirect on the condition of something, then be sure to add "and return" to halt execution.
#
#   def do_something
#     redirect_to(action: "elsewhere") and return if monkeys.nil?
#     render action: "overthere" # won't be called if monkeys is nil
#   end
#
# @abstract It cannot be directly instantiated. Subclasses must implement the `abstract` methods below.
class ActionController::Base < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionController::BasicImplicitRender

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods; end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
  def _helper_methods?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _process_action_callbacks; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
  def _renderers?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_process_action_callbacks(&block); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
  def _view_cache_dependencies?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options; end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
  def _wrapper_options?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def alert; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def allow_forgery_protection; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def allow_forgery_protection=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def asset_host; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def asset_host=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def assets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def assets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_asset_host_protocol; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_asset_host_protocol=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_protect_from_forgery; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_protect_from_forgery=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def default_static_extension; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def default_static_extension=(value); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options; end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options=(_arg0); end

  # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
  def default_url_options?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def enable_fragment_cache_logging; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def enable_fragment_cache_logging=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest; end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
  def etag_with_template_digest?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
  def etaggers?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#10
  def flash(*_arg0, **_arg1, &_arg2); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_origin_check; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_origin_check=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def forgery_protection_strategy; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def forgery_protection_strategy=(value); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys; end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys=(_arg0); end

  # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
  def fragment_cache_keys?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
  def helpers_path?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers; end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers=(_arg0); end

  # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
  def include_all_helpers?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def javascripts_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def javascripts_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def log_warning_on_csrf_failure; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def log_warning_on_csrf_failure=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def logger; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def logger=(value); end

  # source://responders//lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to; end

  # source://responders//lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to=(_arg0); end

  # source://responders//lib/action_controller/respond_with.rb#11
  def mimes_for_respond_to?; end

  # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#36
  def notice; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def per_form_csrf_tokens; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def per_form_csrf_tokens=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def perform_caching; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def perform_caching=(value); end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects; end

  # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
  def raise_on_open_redirects=(val); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def relative_url_root; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def relative_url_root=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def request_forgery_protection_token; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def request_forgery_protection_token=(value); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers; end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers=(_arg0); end

  # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
  def rescue_handlers?; end

  # source://responders//lib/action_controller/respond_with.rb#11
  def responder; end

  # source://responders//lib/action_controller/respond_with.rb#11
  def responder=(_arg0); end

  # source://responders//lib/action_controller/respond_with.rb#11
  def responder?; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def stylesheets_dir; end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
  def stylesheets_dir=(value); end

  # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
  def urlsafe_csrf_tokens; end

  private

  # source://actionview/7.0.4/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  # source://actionpack/7.0.4/lib/action_controller/base.rb#266
  def _protected_ivars; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder; end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder=(value); end

    # source://actionpack/7.0.4/lib/action_controller/form_builder.rb#31
    def _default_form_builder?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types; end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/flash.rb#8
    def _flash_types?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#11
    def _helper_methods?; end

    # source://actionpack/7.0.4/lib/abstract_controller/helpers.rb#15
    def _helpers; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#209
    def _layout?; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions=(value); end

    # source://actionview/7.0.4/lib/action_view/layouts.rb#210
    def _layout_conditions?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _process_action_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _process_action_callbacks=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/renderers.rb#31
    def _renderers?; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching.rb#42
    def _view_cache_dependencies?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options; end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/params_wrapper.rb#185
    def _wrapper_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def allow_forgery_protection; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def allow_forgery_protection=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def asset_host; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def asset_host=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def assets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def assets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_asset_host_protocol; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_asset_host_protocol=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_protect_from_forgery; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_protect_from_forgery=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def default_static_extension; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def default_static_extension=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options; end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options=(value); end

    # source://actionpack/7.0.4/lib/action_dispatch/routing/url_for.rb#95
    def default_url_options?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def enable_fragment_cache_logging; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def enable_fragment_cache_logging=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest; end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/etag_with_template_digest.rb#27
    def etag_with_template_digest?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/conditional_get.rb#13
    def etaggers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_origin_check; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_origin_check=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def forgery_protection_strategy; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def forgery_protection_strategy=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys; end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys=(value); end

    # source://actionpack/7.0.4/lib/abstract_controller/caching/fragments.rb#23
    def fragment_cache_keys?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#63
    def helpers_path?; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers; end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/helpers.rb#64
    def include_all_helpers?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def javascripts_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def javascripts_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def log_warning_on_csrf_failure; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def log_warning_on_csrf_failure=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def logger; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def logger=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal.rb#210
    def middleware_stack; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to=(value); end

    # source://responders//lib/action_controller/respond_with.rb#11
    def mimes_for_respond_to?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def per_form_csrf_tokens; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def per_form_csrf_tokens=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def perform_caching; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def perform_caching=(value); end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects; end

    # source://actionpack/7.0.4/lib/action_controller/metal/redirecting.rb#13
    def raise_on_open_redirects=(val); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def relative_url_root; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def relative_url_root=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def request_forgery_protection_token; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def request_forgery_protection_token=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers; end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers=(value); end

    # source://activesupport/7.0.4/lib/active_support/rescuable.rb#13
    def rescue_handlers?; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def responder; end

    # source://responders//lib/action_controller/respond_with.rb#11
    def responder=(value); end

    # source://responders//lib/action_controller/respond_with.rb#11
    def responder?; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def stylesheets_dir; end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#114
    def stylesheets_dir=(value); end

    # source://activesupport/7.0.4/lib/active_support/configurable.rb#113
    def urlsafe_csrf_tokens; end

    # source://actionpack/7.0.4/lib/action_controller/metal/request_forgery_protection.rb#97
    def urlsafe_csrf_tokens=(urlsafe_csrf_tokens); end

    # Shortcut helper that returns all the modules included in
    # ActionController::Base except the ones passed as arguments:
    #
    #   class MyBaseController < ActionController::Metal
    #     ActionController::Base.without_modules(:ParamsWrapper, :Streaming).each do |left|
    #       include left
    #     end
    #   end
    #
    # This gives better control over what you want to exclude and makes it
    # easier to create a bare controller class, instead of listing the modules
    # required manually.
    #
    # source://actionpack/7.0.4/lib/action_controller/base.rb#198
    def without_modules(*modules); end
  end
end

# source://actionpack/7.0.4/lib/action_controller/base.rb#206
ActionController::Base::MODULES = T.let(T.unsafe(nil), Array)

# Define some internal variables that should not be propagated to the view.
#
# source://actionpack/7.0.4/lib/action_controller/base.rb#261
ActionController::Base::PROTECTED_IVARS = T.let(T.unsafe(nil), Array)

# source://responders//lib/action_controller/respond_with.rb#7
module ActionController::RespondWith
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActionController::RespondWith::ClassMethods

  # For a given controller action, respond_with generates an appropriate
  # response based on the mime-type requested by the client.
  #
  # If the method is called with just a resource, as in this example -
  #
  #   class PeopleController < ApplicationController
  #     respond_to :html, :xml, :json
  #
  #     def index
  #       @people = Person.all
  #       respond_with @people
  #     end
  #   end
  #
  # then the mime-type of the response is typically selected based on the
  # request's Accept header and the set of available formats declared
  # by previous calls to the controller's class method +respond_to+. Alternatively
  # the mime-type can be selected by explicitly setting <tt>request.format</tt> in
  # the controller.
  #
  # If an acceptable format is not identified, the application returns a
  # '406 - not acceptable' status. Otherwise, the default response is to render
  # a template named after the current action and the selected format,
  # e.g. <tt>index.html.erb</tt>. If no template is available, the behavior
  # depends on the selected format:
  #
  # * for an html response - if the request method is +get+, an exception
  #   is raised but for other requests such as +post+ the response
  #   depends on whether the resource has any validation errors (i.e.
  #   assuming that an attempt has been made to save the resource,
  #   e.g. by a +create+ action) -
  #   1. If there are no errors, i.e. the resource
  #      was saved successfully, the response +redirect+'s to the resource
  #      i.e. its +show+ action.
  #   2. If there are validation errors, the response
  #      renders a default action, which is <tt>:new</tt> for a
  #      +post+ request or <tt>:edit</tt> for +patch+ or +put+.
  #   Thus an example like this -
  #
  #     respond_to :html, :xml
  #
  #     def create
  #       @user = User.new(params[:user])
  #       flash[:notice] = 'User was successfully created.' if @user.save
  #       respond_with(@user)
  #     end
  #
  #   is equivalent, in the absence of <tt>create.html.erb</tt>, to -
  #
  #     def create
  #       @user = User.new(params[:user])
  #       respond_to do |format|
  #         if @user.save
  #           flash[:notice] = 'User was successfully created.'
  #           format.html { redirect_to(@user) }
  #           format.xml { render xml: @user }
  #         else
  #           format.html { render action: "new" }
  #           format.xml { render xml: @user }
  #         end
  #       end
  #     end
  #
  # * for a JavaScript request - if the template isn't found, an exception is
  #   raised.
  # * for other requests - i.e. data formats such as xml, json, csv etc, if
  #   the resource passed to +respond_with+ responds to <code>to_<format></code>,
  #   the method attempts to render the resource in the requested format
  #   directly, e.g. for an xml request, the response is equivalent to calling
  #   <code>render xml: resource</code>.
  #
  # === Nested resources
  #
  # As outlined above, the +resources+ argument passed to +respond_with+
  # can play two roles. It can be used to generate the redirect url
  # for successful html requests (e.g. for +create+ actions when
  # no template exists), while for formats other than html and JavaScript
  # it is the object that gets rendered, by being converted directly to the
  # required format (again assuming no template exists).
  #
  # For redirecting successful html requests, +respond_with+ also supports
  # the use of nested resources, which are supplied in the same way as
  # in <code>form_for</code> and <code>polymorphic_url</code>. For example -
  #
  #   def create
  #     @project = Project.find(params[:project_id])
  #     @task = @project.comments.build(params[:task])
  #     flash[:notice] = 'Task was successfully created.' if @task.save
  #     respond_with(@project, @task)
  #   end
  #
  # This would cause +respond_with+ to redirect to <code>project_task_url</code>
  # instead of <code>task_url</code>. For request formats other than html or
  # JavaScript, if multiple resources are passed in this way, it is the last
  # one specified that is rendered.
  #
  # === Customizing response behavior
  #
  # Like +respond_to+, +respond_with+ may also be called with a block that
  # can be used to overwrite any of the default responses, e.g. -
  #
  #   def create
  #     @user = User.new(params[:user])
  #     flash[:notice] = "User was successfully created." if @user.save
  #
  #     respond_with(@user) do |format|
  #       format.html { render }
  #     end
  #   end
  #
  # The argument passed to the block is an ActionController::MimeResponds::Collector
  # object which stores the responses for the formats defined within the
  # block. Note that formats with responses defined explicitly in this way
  # do not have to first be declared using the class method +respond_to+.
  #
  # Also, a hash passed to +respond_with+ immediately after the specified
  # resource(s) is interpreted as a set of options relevant to all
  # formats. Any option accepted by +render+ can be used, e.g.
  #
  #   respond_with @people, status: 200
  #
  # However, note that these options are ignored after an unsuccessful attempt
  # to save a resource, e.g. when automatically rendering <tt>:new</tt>
  # after a post request.
  #
  # Three additional options are relevant specifically to +respond_with+ -
  # 1. <tt>:location</tt> - overwrites the default redirect location used after
  #    a successful html +post+ request.
  # 2. <tt>:action</tt> - overwrites the default render action used after an
  #    unsuccessful html +post+ request.
  # 3. <tt>:render</tt> - allows to pass any options directly to the <tt>:render<tt/>
  #    call after unsuccessful html +post+ request. Useful if for example you
  #    need to render a template which is outside of controller's path or you
  #    want to override the default http <tt>:status</tt> code, e.g.
  #
  #    respond_with(resource, render: { template: 'path/to/template', status: 422 })
  #
  # source://responders//lib/action_controller/respond_with.rb#198
  def respond_with(*resources, &block); end

  protected

  # Collect mimes declared in the class method respond_to valid for the
  # current action.
  #
  # source://responders//lib/action_controller/respond_with.rb#242
  def collect_mimes_from_class_level; end

  # Before action callback that can be used to prevent requests that do not
  # match the mime types defined through <tt>respond_to</tt> from being executed.
  #
  #   class PeopleController < ApplicationController
  #     respond_to :html, :xml, :json
  #
  #     before_action :verify_requested_format!
  #   end
  #
  # source://responders//lib/action_controller/respond_with.rb#229
  def verify_request_format!; end

  # Before action callback that can be used to prevent requests that do not
  # match the mime types defined through <tt>respond_to</tt> from being executed.
  #
  #   class PeopleController < ApplicationController
  #     respond_to :html, :xml, :json
  #
  #     before_action :verify_requested_format!
  #   end
  #
  # source://responders//lib/action_controller/respond_with.rb#229
  def verify_requested_format!; end

  module GeneratedClassMethods
    def mimes_for_respond_to; end
    def mimes_for_respond_to=(value); end
    def mimes_for_respond_to?; end
    def responder; end
    def responder=(value); end
    def responder?; end
  end

  module GeneratedInstanceMethods
    def mimes_for_respond_to; end
    def mimes_for_respond_to=(value); end
    def mimes_for_respond_to?; end
    def responder; end
    def responder=(value); end
    def responder?; end
  end
end

# source://responders//lib/action_controller/respond_with.rb#16
module ActionController::RespondWith::ClassMethods
  # Clear all mime types in <tt>respond_to</tt>.
  #
  # source://responders//lib/action_controller/respond_with.rb#57
  def clear_respond_to; end

  # Defines mime types that are rendered by default when invoking
  # <tt>respond_with</tt>.
  #
  #   respond_to :html, :xml, :json
  #
  # Specifies that all actions in the controller respond to requests
  # for <tt>:html</tt>, <tt>:xml</tt> and <tt>:json</tt>.
  #
  # To specify on per-action basis, use <tt>:only</tt> and
  # <tt>:except</tt> with an array of actions or a single action:
  #
  #   respond_to :html
  #   respond_to :xml, :json, except: [ :edit ]
  #
  # This specifies that all actions respond to <tt>:html</tt>
  # and all actions except <tt>:edit</tt> respond to <tt>:xml</tt> and
  # <tt>:json</tt>.
  #
  #   respond_to :json, only: :create
  #
  # This specifies that the <tt>:create</tt> action and no other responds
  # to <tt>:json</tt>.
  #
  # source://responders//lib/action_controller/respond_with.rb#39
  def respond_to(*mimes); end
end

# Responsible for exposing a resource to different mime requests,
# usually depending on the HTTP verb. The responder is triggered when
# <code>respond_with</code> is called. The simplest case to study is a GET request:
#
#   class PeopleController < ApplicationController
#     respond_to :html, :xml, :json
#
#     def index
#       @people = Person.all
#       respond_with(@people)
#     end
#   end
#
# When a request comes in, for example for an XML response, three steps happen:
#
#   1) the responder searches for a template at people/index.xml;
#
#   2) if the template is not available, it will invoke <code>#to_xml</code> on the given resource;
#
#   3) if the responder does not <code>respond_to :to_xml</code>, call <code>#to_format</code> on it.
#
# === Built-in HTTP verb semantics
#
# The default \Rails responder holds semantics for each HTTP verb. Depending on the
# content type, verb and the resource status, it will behave differently.
#
# Using \Rails default responder, a POST request for creating an object could
# be written as:
#
#   def create
#     @user = User.new(params[:user])
#     flash[:notice] = 'User was successfully created.' if @user.save
#     respond_with(@user)
#   end
#
# Which is exactly the same as:
#
#   def create
#     @user = User.new(params[:user])
#
#     respond_to do |format|
#       if @user.save
#         flash[:notice] = 'User was successfully created.'
#         format.html { redirect_to(@user) }
#         format.xml { render xml: @user, status: :created, location: @user }
#       else
#         format.html { render action: "new" }
#         format.xml { render xml: @user.errors, status: :unprocessable_entity }
#       end
#     end
#   end
#
# The same happens for PATCH/PUT and DELETE requests.
#
# === Nested resources
#
# You can supply nested resources as you do in <code>form_for</code> and <code>polymorphic_url</code>.
# Consider the project has many tasks example. The create action for
# TasksController would be like:
#
#   def create
#     @project = Project.find(params[:project_id])
#     @task = @project.tasks.build(params[:task])
#     flash[:notice] = 'Task was successfully created.' if @task.save
#     respond_with(@project, @task)
#   end
#
# Giving several resources ensures that the responder will redirect to
# <code>project_task_url</code> instead of <code>task_url</code>.
#
# Namespaced and singleton resources require a symbol to be given, as in
# polymorphic urls. If a project has one manager which has many tasks, it
# should be invoked as:
#
#   respond_with(@project, :manager, @task)
#
# Note that if you give an array, it will be treated as a collection,
# so the following is not equivalent:
#
#   respond_with [@project, :manager, @task]
#
# === Custom options
#
# <code>respond_with</code> also allows you to pass options that are forwarded
# to the underlying render call. Those options are only applied for success
# scenarios. For instance, you can do the following in the create method above:
#
#   def create
#     @project = Project.find(params[:project_id])
#     @task = @project.tasks.build(params[:task])
#     flash[:notice] = 'Task was successfully created.' if @task.save
#     respond_with(@project, @task, status: 201)
#   end
#
# This will return status 201 if the task was saved successfully. If not,
# it will simply ignore the given options and return status 422 and the
# resource errors. You can also override the location to redirect to:
#
#   respond_with(@project, location: root_path)
#
# To customize the failure scenario, you can pass a block to
# <code>respond_with</code>:
#
#   def create
#     @project = Project.find(params[:project_id])
#     @task = @project.tasks.build(params[:task])
#     respond_with(@project, @task, status: 201) do |format|
#       if @task.save
#         flash[:notice] = 'Task was successfully created.'
#       else
#         format.html { render "some_special_template" }
#       end
#     end
#   end
#
# Using <code>respond_with</code> with a block follows the same syntax as <code>respond_to</code>.
#
# source://responders//lib/action_controller/responder.rb#122
class ActionController::Responder
  # @return [Responder] a new instance of Responder
  #
  # source://responders//lib/action_controller/responder.rb#131
  def initialize(controller, resources, options = T.unsafe(nil)); end

  # Returns the value of attribute controller.
  #
  # source://responders//lib/action_controller/responder.rb#123
  def controller; end

  # source://responders//lib/action_controller/responder.rb#148
  def delete?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute format.
  #
  # source://responders//lib/action_controller/responder.rb#123
  def format; end

  # source://responders//lib/action_controller/responder.rb#148
  def get?(*_arg0, **_arg1, &_arg2); end

  # source://responders//lib/action_controller/responder.rb#147
  def head(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute options.
  #
  # source://responders//lib/action_controller/responder.rb#123
  def options; end

  # source://responders//lib/action_controller/responder.rb#148
  def patch?(*_arg0, **_arg1, &_arg2); end

  # source://responders//lib/action_controller/responder.rb#148
  def post?(*_arg0, **_arg1, &_arg2); end

  # source://responders//lib/action_controller/responder.rb#148
  def put?(*_arg0, **_arg1, &_arg2); end

  # source://responders//lib/action_controller/responder.rb#147
  def redirect_to(*_arg0, **_arg1, &_arg2); end

  # source://responders//lib/action_controller/responder.rb#147
  def render(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute request.
  #
  # source://responders//lib/action_controller/responder.rb#123
  def request; end

  # Returns the value of attribute resource.
  #
  # source://responders//lib/action_controller/responder.rb#123
  def resource; end

  # Returns the value of attribute resources.
  #
  # source://responders//lib/action_controller/responder.rb#123
  def resources; end

  # Main entry point for responder responsible to dispatch to the proper format.
  #
  # source://responders//lib/action_controller/responder.rb#163
  def respond; end

  # All other formats follow the procedure below. First we try to render a
  # template, if the template is not available, we verify if the resource
  # responds to :to_format and display it.
  #
  # source://responders//lib/action_controller/responder.rb#186
  def to_format; end

  # HTML format does not render the resource, it always attempt to render a
  # template.
  #
  # source://responders//lib/action_controller/responder.rb#171
  def to_html; end

  # to_js simply tries to render a template. If no template is found, raises the error.
  #
  # source://responders//lib/action_controller/responder.rb#178
  def to_js; end

  protected

  # This is the common behavior for formats associated with APIs, such as :xml and :json.
  #
  # @raise [MissingRenderer]
  #
  # source://responders//lib/action_controller/responder.rb#212
  def api_behavior; end

  # Returns the resource location by retrieving it from the options or
  # returning the resources array.
  #
  # source://responders//lib/action_controller/responder.rb#227
  def api_location; end

  # By default, render the <code>:edit</code> action for HTML requests with errors, unless
  # the verb was POST.
  #
  # source://responders//lib/action_controller/responder.rb#287
  def default_action; end

  # If a response block was given, use it, otherwise call render on
  # controller.
  #
  # source://responders//lib/action_controller/responder.rb#236
  def default_render; end

  # Display is just a shortcut to render a resource with the current format.
  #
  #   display @user, status: :ok
  #
  # For XML requests it's equivalent to:
  #
  #   render xml: @user, status: :ok
  #
  # Options sent by the user are also used:
  #
  #   respond_with(@user, status: :created)
  #   display(@user, status: :ok)
  #
  # Results in:
  #
  #   render xml: @user, status: :created
  #
  # source://responders//lib/action_controller/responder.rb#261
  def display(resource, given_options = T.unsafe(nil)); end

  # source://responders//lib/action_controller/responder.rb#265
  def display_errors; end

  # Check whether the resource has errors.
  #
  # @return [Boolean]
  #
  # source://responders//lib/action_controller/responder.rb#271
  def has_errors?; end

  # Check whether the necessary Renderer is available
  #
  # @return [Boolean]
  #
  # source://responders//lib/action_controller/responder.rb#276
  def has_renderer?; end

  # @return [Boolean]
  #
  # source://responders//lib/action_controller/responder.rb#280
  def has_view_rendering?; end

  # source://responders//lib/action_controller/responder.rb#295
  def json_resource_errors; end

  # This is the common behavior for formats associated with browsing, like :html, :iphone and so forth.
  #
  # source://responders//lib/action_controller/responder.rb#201
  def navigation_behavior(error); end

  # Returns the resource location by retrieving it from the options or
  # returning the resources array.
  #
  # source://responders//lib/action_controller/responder.rb#227
  def navigation_location; end

  # source://responders//lib/action_controller/responder.rb#303
  def rendering_options; end

  # source://responders//lib/action_controller/responder.rb#291
  def resource_errors; end

  # Returns the resource location by retrieving it from the options or
  # returning the resources array.
  #
  # source://responders//lib/action_controller/responder.rb#227
  def resource_location; end

  # @return [Boolean]
  #
  # source://responders//lib/action_controller/responder.rb#299
  def response_overridden?; end

  class << self
    # Initializes a new responder and invokes the proper format. If the format is
    # not defined, call to_format.
    #
    # source://responders//lib/action_controller/responder.rb#157
    def call(*args); end
  end
end

# source://responders//lib/action_controller/responder.rb#125
ActionController::Responder::DEFAULT_ACTIONS_FOR_VERBS = T.let(T.unsafe(nil), Hash)

# source://responders//lib/responders.rb#11
module Responders; end

# This responder modifies your current responder to redirect
# to the collection page on POST/PUT/DELETE.
#
# source://responders//lib/responders/collection_responder.rb#6
module Responders::CollectionResponder
  protected

  # Returns the collection location for redirecting after POST/PUT/DELETE.
  # This method, converts the following resources array to the following:
  #
  #   [:admin, @post] #=> [:admin, :posts]
  #   [@user, @post]  #=> [@user, :posts]
  #
  # When these new arrays are given to redirect_to, it will generate the
  # proper URL pointing to the index action.
  #
  #   [:admin, @post] #=> admin_posts_url
  #   [@user, @post]  #=> user_posts_url(@user.to_param)
  #
  # source://responders//lib/responders/collection_responder.rb#21
  def navigation_location; end
end

# source://responders//lib/responders/controller_method.rb#4
module Responders::ControllerMethod
  # Adds the given responders to the current controller's responder, allowing you to cherry-pick
  # which responders you want per controller.
  #
  #   class InvitationsController < ApplicationController
  #     responders :flash, :http_cache
  #   end
  #
  # Takes symbols and strings and translates them to VariableResponder (eg. :flash becomes FlashResponder).
  # Also allows passing in the responders modules in directly, so you could do:
  #
  #    responders FlashResponder, HttpCacheResponder
  #
  # Or a mix of both methods:
  #
  #    responders :flash, MyCustomResponder
  #
  # source://responders//lib/responders/controller_method.rb#21
  def responders(*responders); end
end

# Responder to automatically set flash messages based on I18n API. It checks for
# message based on the current action, but also allows defaults to be set, using
# the following order:
#
#   flash.controller_name.action_name.status
#   flash.actions.action_name.status
#
# So, if you have a CarsController, create action, it will check for:
#
#   flash.cars.create.status
#   flash.actions.create.status
#
# The statuses by default are :notice (when the object can be created, updated
# or destroyed with success) and :alert (when the object cannot be created
# or updated).
#
# On I18n, the resource_name given is available as interpolation option,
# this means you can set:
#
#   flash:
#     actions:
#       create:
#         notice: "Hooray! %{resource_name} was successfully created!"
#
# But sometimes, flash messages are not that simple. Going back
# to cars example, you might want to say the brand of the car when it's
# updated. Well, that's easy also:
#
#   flash:
#     cars:
#       update:
#         notice: "Hooray! You just tuned your %{car_brand}!"
#
# Since :car_name is not available for interpolation by default, you have
# to overwrite `flash_interpolation_options` in your controller.
#
#   def flash_interpolation_options
#     { :car_brand => @car.brand }
#   end
#
# Then you will finally have:
#
#   'Hooray! You just tuned your Aston Martin!'
#
# If your controller is namespaced, for example Admin::CarsController,
# the messages will be checked in the following order:
#
#   flash.admin.cars.create.status
#   flash.admin.actions.create.status
#   flash.cars.create.status
#   flash.actions.create.status
#
# You can also have flash messages with embedded HTML. Just create a scope that
# ends with <tt>_html</tt> as the scopes below:
#
#   flash.actions.create.notice_html
#   flash.cars.create.notice_html
#
# == Options
#
# FlashResponder also accepts some options through respond_with API.
#
# * :flash - When set to false, no flash message is set.
#
#     respond_with(@user, :flash => true)
#
# * :notice - Supply the message to be set if the record has no errors.
# * :alert - Supply the message to be set if the record has errors.
#
#     respond_with(@user, :notice => "Hooray! Welcome!", :alert => "Woot! You failed.")
#
# * :flash_now - Sets the flash message using flash.now. Accepts true, :on_failure or :on_sucess.
#
# == Configure status keys
#
# As said previously, FlashResponder by default use :notice and :alert
# keys. You can change that by setting the status_keys:
#
#   Responders::FlashResponder.flash_keys = [ :success, :failure ]
#
# However, the options :notice and :alert to respond_with are kept :notice
# and :alert.
#
# source://responders//lib/responders/flash_responder.rb#87
module Responders::FlashResponder
  # source://responders//lib/responders/flash_responder.rb#99
  def initialize(controller, resources, options = T.unsafe(nil)); end

  # source://responders//lib/responders/flash_responder.rb#107
  def to_html; end

  # source://responders//lib/responders/flash_responder.rb#112
  def to_js; end

  protected

  # source://responders//lib/responders/flash_responder.rb#166
  def controller_interpolation_options; end

  # source://responders//lib/responders/flash_responder.rb#183
  def flash_defaults_by_namespace(status); end

  # source://responders//lib/responders/flash_responder.rb#151
  def mount_i18n_options(status); end

  # source://responders//lib/responders/flash_responder.rb#175
  def resource_name; end

  # source://responders//lib/responders/flash_responder.rb#135
  def set_flash(key, value); end

  # source://responders//lib/responders/flash_responder.rb#119
  def set_flash_message!; end

  # @return [Boolean]
  #
  # source://responders//lib/responders/flash_responder.rb#147
  def set_flash_message?; end

  # @return [Boolean]
  #
  # source://responders//lib/responders/flash_responder.rb#142
  def set_flash_now?; end

  class << self
    # Returns the value of attribute flash_keys.
    #
    # source://responders//lib/responders/flash_responder.rb#89
    def flash_keys; end

    # Sets the attribute flash_keys
    #
    # @param value the value to set the attribute flash_keys to.
    #
    # source://responders//lib/responders/flash_responder.rb#89
    def flash_keys=(_arg0); end

    # Returns the value of attribute helper.
    #
    # source://responders//lib/responders/flash_responder.rb#89
    def helper; end

    # Sets the attribute helper
    #
    # @param value the value to set the attribute helper to.
    #
    # source://responders//lib/responders/flash_responder.rb#89
    def helper=(_arg0); end

    # Returns the value of attribute namespace_lookup.
    #
    # source://responders//lib/responders/flash_responder.rb#89
    def namespace_lookup; end

    # Sets the attribute namespace_lookup
    #
    # @param value the value to set the attribute namespace_lookup to.
    #
    # source://responders//lib/responders/flash_responder.rb#89
    def namespace_lookup=(_arg0); end
  end
end

# Set HTTP Last-Modified headers based on the given resource. It's used only
# on API behavior (to_format) and is useful for a client to check in the server
# if a resource changed after a specific date or not.
#
# This is not usually not used in html requests because pages contains a lot
# information besides the resource information, as current_user, flash messages,
# widgets... that are better handled with other strategies, as fragment caches and
# the digest of the body.
#
# source://responders//lib/responders/http_cache_responder.rb#13
module Responders::HttpCacheResponder
  # source://responders//lib/responders/http_cache_responder.rb#14
  def initialize(controller, resources, options = T.unsafe(nil)); end

  # source://responders//lib/responders/http_cache_responder.rb#19
  def to_format; end

  protected

  # source://responders//lib/responders/http_cache_responder.rb#26
  def do_http_cache!; end

  # @return [Boolean]
  #
  # source://responders//lib/responders/http_cache_responder.rb#37
  def do_http_cache?; end

  # @return [Boolean]
  #
  # source://responders//lib/responders/http_cache_responder.rb#42
  def persisted?; end
end

# source://responders//lib/responders/location_responder.rb#4
module Responders::LocationResponder
  class << self
    # @private
    #
    # source://responders//lib/responders/location_responder.rb#5
    def included(_base); end
  end
end

# source://responders//lib/responders.rb#19
class Responders::Railtie < ::Rails::Railtie; end
